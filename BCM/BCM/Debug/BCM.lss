
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080007e  0080007e  00000630  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000179d  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abf  00000000  00000000  00001f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bdc  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  0000361c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f6  00000000  00000000  0000385c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000108a  00000000  00000000  00004252  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000052dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  8a:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:


void APP_init(void)
{
	//DDRB = 0xff;
	BCM_init(&st_bcm_instance_send_string);
  92:	86 e6       	ldi	r24, 0x66	; 102
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BCM_init>
	LED_init(LED_0);
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 71 00 	call	0xe2	; 0xe2 <LED_init>
	//LED_on(LED_0);
	LED_init(LED_1);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 71 00 	call	0xe2	; 0xe2 <LED_init>
  a6:	08 95       	ret

000000a8 <APP_start>:

void APP_init(void);

void APP_start(void)
{
	APP_init();
  a8:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	89 e6       	ldi	r24, 0x69	; 105
  b0:	98 e1       	ldi	r25, 0x18	; 24
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <APP_start+0xa>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <APP_start+0x14>
  bc:	00 00       	nop
	while(1)
	{
		
		
		_delay_ms(1000);
		u8_gs_send_string_result = BCM_dispatcher(&st_bcm_instance_send_string);
  be:	86 e6       	ldi	r24, 0x66	; 102
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <BCM_dispatcher>
		if (u8_gs_send_string_result == 0)
  c6:	81 11       	cpse	r24, r1
  c8:	02 c0       	rjmp	.+4      	; 0xce <APP_start+0x26>
		{
			LED_toggle(LED_0);
  ca:	0e 94 8a 00 	call	0x114	; 0x114 <LED_toggle>
			u8_gs_send_string_result = 1;
			//_delay_ms(2000);
		}
		//PORTB = u8_gs_rec_string_result;
		//_delay_ms(1000);
		u8_gs_rec_string_result = BCM_dispatcher(&st_bcm_instance_rec_string);
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <BCM_dispatcher>
		//PORTB = u8_gs_rec_string_result;
		if (u8_gs_rec_string_result == 0)
  d6:	81 11       	cpse	r24, r1
  d8:	e9 cf       	rjmp	.-46     	; 0xac <APP_start+0x4>
		{
			LED_toggle(LED_1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 8a 00 	call	0x114	; 0x114 <LED_toggle>
  e0:	e5 cf       	rjmp	.-54     	; 0xac <APP_start+0x4>

000000e2 <LED_init>:
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	88 f4       	brcc	.+34     	; 0x10c <LED_init+0x2a>
  ea:	c8 2f       	mov	r28, r24
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	fe 01       	movw	r30, r28
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	e7 58       	subi	r30, 0x87	; 135
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	61 81       	ldd	r22, Z+1	; 0x01
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	80 81       	ld	r24, Z
  fe:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_init>
 102:	c5 57       	subi	r28, 0x75	; 117
 104:	df 4f       	sbci	r29, 0xFF	; 255
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	98 83       	st	Y, r25
 10a:	01 c0       	rjmp	.+2      	; 0x10e <LED_init+0x2c>
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <LED_toggle>:
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	40 f5       	brcc	.+80     	; 0x16c <LED_toggle+0x58>
 11c:	c8 2f       	mov	r28, r24
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	fe 01       	movw	r30, r28
 122:	e5 57       	subi	r30, 0x75	; 117
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	80 81       	ld	r24, Z
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	79 f4       	brne	.+30     	; 0x14a <LED_toggle+0x36>
 12c:	fe 01       	movw	r30, r28
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e7 58       	subi	r30, 0x87	; 135
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	61 81       	ldd	r22, Z+1	; 0x01
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_writePIN>
 140:	c5 57       	subi	r28, 0x75	; 117
 142:	df 4f       	sbci	r29, 0xFF	; 255
 144:	93 e0       	ldi	r25, 0x03	; 3
 146:	98 83       	st	Y, r25
 148:	14 c0       	rjmp	.+40     	; 0x172 <LED_toggle+0x5e>
 14a:	83 30       	cpi	r24, 0x03	; 3
 14c:	89 f4       	brne	.+34     	; 0x170 <LED_toggle+0x5c>
 14e:	fe 01       	movw	r30, r28
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	e7 58       	subi	r30, 0x87	; 135
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	61 81       	ldd	r22, Z+1	; 0x01
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	80 81       	ld	r24, Z
 15e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_writePIN>
 162:	c5 57       	subi	r28, 0x75	; 117
 164:	df 4f       	sbci	r29, 0xFF	; 255
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	98 83       	st	Y, r25
 16a:	03 c0       	rjmp	.+6      	; 0x172 <LED_toggle+0x5e>
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	01 c0       	rjmp	.+2      	; 0x172 <LED_toggle+0x5e>
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <main>:
 * Author : Mahmoud Sarhan
 */ 
#include "APP/app.h"
int main(void)
{
	APP_start();
 178:	0e 94 54 00 	call	0xa8	; 0xa8 <APP_start>
}
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret

00000182 <DIO_init>:
 182:	68 30       	cpi	r22, 0x08	; 8
 184:	a0 f5       	brcc	.+104    	; 0x1ee <DIO_init+0x6c>
 186:	81 11       	cpse	r24, r1
 188:	0b c0       	rjmp	.+22     	; 0x1a0 <DIO_init+0x1e>
 18a:	8a b3       	in	r24, 0x1a	; 26
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_init+0x12>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_init+0xe>
 198:	48 2b       	or	r20, r24
 19a:	4a bb       	out	0x1a, r20	; 26
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	59 f4       	brne	.+22     	; 0x1ba <DIO_init+0x38>
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_init+0x2c>
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_init+0x28>
 1b2:	48 2b       	or	r20, r24
 1b4:	47 bb       	out	0x17, r20	; 23
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <DIO_init+0x52>
 1be:	84 b3       	in	r24, 0x14	; 20
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_init+0x46>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_init+0x42>
 1cc:	48 2b       	or	r20, r24
 1ce:	44 bb       	out	0x14, r20	; 20
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	69 f4       	brne	.+26     	; 0x1f2 <DIO_init+0x70>
 1d8:	81 b3       	in	r24, 0x11	; 17
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_init+0x60>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_init+0x5c>
 1e6:	48 2b       	or	r20, r24
 1e8:	41 bb       	out	0x11, r20	; 17
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	08 95       	ret
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	08 95       	ret

000001f6 <DIO_writePIN>:
 1f6:	68 30       	cpi	r22, 0x08	; 8
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <DIO_writePIN+0x6>
 1fa:	74 c0       	rjmp	.+232    	; 0x2e4 <DIO_writePIN+0xee>
 1fc:	81 11       	cpse	r24, r1
 1fe:	1b c0       	rjmp	.+54     	; 0x236 <DIO_writePIN+0x40>
 200:	41 30       	cpi	r20, 0x01	; 1
 202:	61 f4       	brne	.+24     	; 0x21c <DIO_writePIN+0x26>
 204:	2b b3       	in	r18, 0x1b	; 27
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_writePIN+0x1a>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_writePIN+0x16>
 214:	82 2b       	or	r24, r18
 216:	8b bb       	out	0x1b, r24	; 27
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret
 21c:	2b b3       	in	r18, 0x1b	; 27
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_writePIN+0x32>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_writePIN+0x2e>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	8b bb       	out	0x1b, r24	; 27
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	d9 f4       	brne	.+54     	; 0x270 <DIO_writePIN+0x7a>
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	61 f4       	brne	.+24     	; 0x256 <DIO_writePIN+0x60>
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_writePIN+0x54>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_writePIN+0x50>
 24e:	82 2b       	or	r24, r18
 250:	88 bb       	out	0x18, r24	; 24
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	08 95       	ret
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_writePIN+0x6c>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_writePIN+0x68>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	d9 f4       	brne	.+54     	; 0x2aa <DIO_writePIN+0xb4>
 274:	41 30       	cpi	r20, 0x01	; 1
 276:	61 f4       	brne	.+24     	; 0x290 <DIO_writePIN+0x9a>
 278:	25 b3       	in	r18, 0x15	; 21
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_writePIN+0x8e>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_writePIN+0x8a>
 288:	82 2b       	or	r24, r18
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
 290:	25 b3       	in	r18, 0x15	; 21
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_writePIN+0xa6>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_writePIN+0xa2>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	85 bb       	out	0x15, r24	; 21
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	e9 f4       	brne	.+58     	; 0x2e8 <DIO_writePIN+0xf2>
 2ae:	41 30       	cpi	r20, 0x01	; 1
 2b0:	61 f4       	brne	.+24     	; 0x2ca <DIO_writePIN+0xd4>
 2b2:	22 b3       	in	r18, 0x12	; 18
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_writePIN+0xc8>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_writePIN+0xc4>
 2c2:	82 2b       	or	r24, r18
 2c4:	82 bb       	out	0x12, r24	; 18
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	08 95       	ret
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_writePIN+0xe0>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_writePIN+0xdc>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	82 bb       	out	0x12, r24	; 18
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	08 95       	ret
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	08 95       	ret

000002ec <UART_init>:
 2ec:	81 11       	cpse	r24, r1
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <UART_init+0x20>
 2f0:	10 bc       	out	0x20, r1	; 32
 2f2:	83 e3       	ldi	r24, 0x33	; 51
 2f4:	89 b9       	out	0x09, r24	; 9
 2f6:	8a b1       	in	r24, 0x0a	; 10
 2f8:	88 61       	ori	r24, 0x18	; 24
 2fa:	8a b9       	out	0x0a, r24	; 10
 2fc:	80 b5       	in	r24, 0x20	; 32
 2fe:	86 68       	ori	r24, 0x86	; 134
 300:	80 bd       	out	0x20, r24	; 32
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8_uart_state>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret
 30c:	84 e0       	ldi	r24, 0x04	; 4
 30e:	08 95       	ret

00000310 <UART_tx>:
 310:	61 11       	cpse	r22, r1
 312:	09 c0       	rjmp	.+18     	; 0x326 <UART_tx+0x16>
 314:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <u8_uart_state>
 318:	91 30       	cpi	r25, 0x01	; 1
 31a:	39 f4       	brne	.+14     	; 0x32a <UART_tx+0x1a>
 31c:	5d 9b       	sbis	0x0b, 5	; 11
 31e:	fe cf       	rjmp	.-4      	; 0x31c <UART_tx+0xc>
 320:	8c b9       	out	0x0c, r24	; 12
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	08 95       	ret
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	08 95       	ret

0000032e <UART_rx>:
 32e:	61 11       	cpse	r22, r1
 330:	0b c0       	rjmp	.+22     	; 0x348 <UART_rx+0x1a>
 332:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <u8_uart_state>
 336:	21 30       	cpi	r18, 0x01	; 1
 338:	49 f4       	brne	.+18     	; 0x34c <UART_rx+0x1e>
 33a:	5f 9b       	sbis	0x0b, 7	; 11
 33c:	fe cf       	rjmp	.-4      	; 0x33a <UART_rx+0xc>
 33e:	2c b1       	in	r18, 0x0c	; 12
 340:	fc 01       	movw	r30, r24
 342:	20 83       	st	Z, r18
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	08 95       	ret
 348:	84 e0       	ldi	r24, 0x04	; 4
 34a:	08 95       	ret
 34c:	84 e0       	ldi	r24, 0x04	; 4
 34e:	08 95       	ret

00000350 <UART_read_string>:
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	61 11       	cpse	r22, r1
 35a:	19 c0       	rjmp	.+50     	; 0x38e <UART_read_string+0x3e>
 35c:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <u8_uart_state>
 360:	21 30       	cpi	r18, 0x01	; 1
 362:	b9 f4       	brne	.+46     	; 0x392 <UART_read_string+0x42>
 364:	c6 2f       	mov	r28, r22
 366:	8c 01       	movw	r16, r24
 368:	80 e3       	ldi	r24, 0x30	; 48
 36a:	f8 01       	movw	r30, r16
 36c:	80 83       	st	Z, r24
 36e:	d0 e0       	ldi	r29, 0x00	; 0
 370:	6c 2f       	mov	r22, r28
 372:	c8 01       	movw	r24, r16
 374:	8d 0f       	add	r24, r29
 376:	91 1d       	adc	r25, r1
 378:	0e 94 97 01 	call	0x32e	; 0x32e <UART_rx>
 37c:	df 5f       	subi	r29, 0xFF	; 255
 37e:	f8 01       	movw	r30, r16
 380:	ed 0f       	add	r30, r29
 382:	f1 1d       	adc	r31, r1
 384:	31 97       	sbiw	r30, 0x01	; 1
 386:	90 81       	ld	r25, Z
 388:	91 11       	cpse	r25, r1
 38a:	f2 cf       	rjmp	.-28     	; 0x370 <UART_read_string+0x20>
 38c:	03 c0       	rjmp	.+6      	; 0x394 <UART_read_string+0x44>
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	01 c0       	rjmp	.+2      	; 0x394 <UART_read_string+0x44>
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <UART_write_string>:
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	61 11       	cpse	r22, r1
 3a8:	18 c0       	rjmp	.+48     	; 0x3da <UART_write_string+0x3c>
 3aa:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <u8_uart_state>
 3ae:	21 30       	cpi	r18, 0x01	; 1
 3b0:	39 f0       	breq	.+14     	; 0x3c0 <UART_write_string+0x22>
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	13 c0       	rjmp	.+38     	; 0x3dc <UART_write_string+0x3e>
 3b6:	6c 2f       	mov	r22, r28
 3b8:	0e 94 88 01 	call	0x310	; 0x310 <UART_tx>
 3bc:	df 5f       	subi	r29, 0xFF	; 255
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <UART_write_string+0x28>
 3c0:	c6 2f       	mov	r28, r22
 3c2:	8c 01       	movw	r16, r24
 3c4:	d0 e0       	ldi	r29, 0x00	; 0
 3c6:	f8 01       	movw	r30, r16
 3c8:	ed 0f       	add	r30, r29
 3ca:	f1 1d       	adc	r31, r1
 3cc:	80 81       	ld	r24, Z
 3ce:	81 11       	cpse	r24, r1
 3d0:	f2 cf       	rjmp	.-28     	; 0x3b6 <UART_write_string+0x18>
 3d2:	6c 2f       	mov	r22, r28
 3d4:	0e 94 88 01 	call	0x310	; 0x310 <UART_tx>
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <UART_write_string+0x3e>
 3da:	84 e0       	ldi	r24, 0x04	; 4
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	08 95       	ret

000003e6 <BCM_init>:
		{
			u8_retVal = BCM_ERROR_NOT_OK;
		}
	}
	return u8_retVal;
}
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	89 f0       	breq	.+34     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 81       	ld	r18, Z
 3ee:	21 11       	cpse	r18, r1
 3f0:	0f c0       	rjmp	.+30     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3f2:	81 81       	ldd	r24, Z+1	; 0x01
 3f4:	81 11       	cpse	r24, r1
 3f6:	0e c0       	rjmp	.+28     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3f8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <u8_gs_bcmUartState>
 3fc:	81 11       	cpse	r24, r1
 3fe:	0c c0       	rjmp	.+24     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 400:	0e 94 76 01 	call	0x2ec	; 0x2ec <UART_init>
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <u8_gs_bcmUartState>
 40a:	08 95       	ret
 40c:	86 e0       	ldi	r24, 0x06	; 6
 40e:	08 95       	ret
 410:	86 e0       	ldi	r24, 0x06	; 6
 412:	08 95       	ret
 414:	86 e0       	ldi	r24, 0x06	; 6
 416:	08 95       	ret
 418:	86 e0       	ldi	r24, 0x06	; 6
 41a:	08 95       	ret

0000041c <BCM_send>:
u8_bcmError_t BCM_send(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
 41c:	00 97       	sbiw	r24, 0x00	; 0
 41e:	99 f0       	breq	.+38     	; 0x446 <BCM_send+0x2a>
	{
		u8_retVal = BCM_ERROR_NOT_OK;
	}
	else
	{
		if (st_bcm_instance_t->comm_portocol == UART)
 420:	fc 01       	movw	r30, r24
 422:	20 81       	ld	r18, Z
 424:	21 11       	cpse	r18, r1
 426:	11 c0       	rjmp	.+34     	; 0x44a <BCM_send+0x2e>
		{
			if (st_bcm_instance_t->comm_channel == UART_0 && u8_gs_bcmUartState[UART_0] == INIT)
 428:	21 81       	ldd	r18, Z+1	; 0x01
 42a:	21 11       	cpse	r18, r1
 42c:	10 c0       	rjmp	.+32     	; 0x44e <BCM_send+0x32>
 42e:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <u8_gs_bcmUartState>
 432:	21 30       	cpi	r18, 0x01	; 1
 434:	71 f4       	brne	.+28     	; 0x452 <BCM_send+0x36>
			{
				u8_retVal = UART_tx(*st_bcm_instance_t->u8_message ,UART0);
 436:	04 80       	ldd	r0, Z+4	; 0x04
 438:	f5 81       	ldd	r31, Z+5	; 0x05
 43a:	e0 2d       	mov	r30, r0
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	0e 94 88 01 	call	0x310	; 0x310 <UART_tx>
 444:	08 95       	ret
u8_bcmError_t BCM_send(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
	{
		u8_retVal = BCM_ERROR_NOT_OK;
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	08 95       	ret
				u8_retVal = BCM_ERROR_NOT_OK;
			}
		}
		else
		{
			u8_retVal = BCM_ERROR_NOT_OK;
 44a:	86 e0       	ldi	r24, 0x06	; 6
 44c:	08 95       	ret
			{
				u8_retVal = UART_tx(*st_bcm_instance_t->u8_message ,UART0);
			}
			else
			{
				u8_retVal = BCM_ERROR_NOT_OK;
 44e:	86 e0       	ldi	r24, 0x06	; 6
 450:	08 95       	ret
 452:	86 e0       	ldi	r24, 0x06	; 6
		{
			u8_retVal = BCM_ERROR_NOT_OK;
		}
	}
	return u8_retVal;
}
 454:	08 95       	ret

00000456 <BCM_send_n>:
u8_bcmError_t BCM_send_n(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
 456:	00 97       	sbiw	r24, 0x00	; 0
 458:	89 f0       	breq	.+34     	; 0x47c <BCM_send_n+0x26>
	{
		u8_retVal = BCM_ERROR_NOT_OK;
	}
	else
	{
		if (st_bcm_instance_t->comm_portocol == UART)
 45a:	fc 01       	movw	r30, r24
 45c:	20 81       	ld	r18, Z
 45e:	21 11       	cpse	r18, r1
 460:	0f c0       	rjmp	.+30     	; 0x480 <BCM_send_n+0x2a>
		{
			if (st_bcm_instance_t->comm_channel == UART_0 && u8_gs_bcmUartState[UART_0] == INIT)
 462:	21 81       	ldd	r18, Z+1	; 0x01
 464:	21 11       	cpse	r18, r1
 466:	0e c0       	rjmp	.+28     	; 0x484 <BCM_send_n+0x2e>
 468:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <u8_gs_bcmUartState>
 46c:	21 30       	cpi	r18, 0x01	; 1
 46e:	61 f4       	brne	.+24     	; 0x488 <BCM_send_n+0x32>
			{
				u8_retVal = UART_write_string(st_bcm_instance_t->u8_message , UART0);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	84 81       	ldd	r24, Z+4	; 0x04
 474:	95 81       	ldd	r25, Z+5	; 0x05
 476:	0e 94 cf 01 	call	0x39e	; 0x39e <UART_write_string>
 47a:	08 95       	ret
u8_bcmError_t BCM_send_n(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
	{
		u8_retVal = BCM_ERROR_NOT_OK;
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	08 95       	ret
				u8_retVal = BCM_ERROR_NOT_OK;
			}
		}
		else
		{
			u8_retVal = BCM_ERROR_NOT_OK;
 480:	86 e0       	ldi	r24, 0x06	; 6
 482:	08 95       	ret
			{
				u8_retVal = UART_write_string(st_bcm_instance_t->u8_message , UART0);
			}
			else
			{
				u8_retVal = BCM_ERROR_NOT_OK;
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	08 95       	ret
 488:	86 e0       	ldi	r24, 0x06	; 6
		{
			u8_retVal = BCM_ERROR_NOT_OK;
		}
	}
	return u8_retVal;
}
 48a:	08 95       	ret

0000048c <BCM_rec>:
u8_bcmError_t BCM_rec(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	89 f0       	breq	.+34     	; 0x4b2 <BCM_rec+0x26>
	{
		u8_retVal = BCM_ERROR_NOT_OK;
	}
	else
	{
		if (st_bcm_instance_t->comm_portocol == UART)
 490:	fc 01       	movw	r30, r24
 492:	20 81       	ld	r18, Z
 494:	21 11       	cpse	r18, r1
 496:	0f c0       	rjmp	.+30     	; 0x4b6 <BCM_rec+0x2a>
		{
			if (st_bcm_instance_t->comm_channel == UART_0 && u8_gs_bcmUartState[UART_0] == INIT)
 498:	21 81       	ldd	r18, Z+1	; 0x01
 49a:	21 11       	cpse	r18, r1
 49c:	0e c0       	rjmp	.+28     	; 0x4ba <BCM_rec+0x2e>
 49e:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <u8_gs_bcmUartState>
 4a2:	21 30       	cpi	r18, 0x01	; 1
 4a4:	61 f4       	brne	.+24     	; 0x4be <BCM_rec+0x32>
			{
				u8_retVal = UART_rx(st_bcm_instance_t->u8_message ,UART0);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	84 81       	ldd	r24, Z+4	; 0x04
 4aa:	95 81       	ldd	r25, Z+5	; 0x05
 4ac:	0e 94 97 01 	call	0x32e	; 0x32e <UART_rx>
 4b0:	08 95       	ret
u8_bcmError_t BCM_rec(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
	{
		u8_retVal = BCM_ERROR_NOT_OK;
 4b2:	86 e0       	ldi	r24, 0x06	; 6
 4b4:	08 95       	ret
				u8_retVal = BCM_ERROR_NOT_OK;
			}
		}
		else
		{
			u8_retVal = BCM_ERROR_NOT_OK;
 4b6:	86 e0       	ldi	r24, 0x06	; 6
 4b8:	08 95       	ret
			{
				u8_retVal = UART_rx(st_bcm_instance_t->u8_message ,UART0);
			}
			else
			{
				u8_retVal = BCM_ERROR_NOT_OK;
 4ba:	86 e0       	ldi	r24, 0x06	; 6
 4bc:	08 95       	ret
 4be:	86 e0       	ldi	r24, 0x06	; 6
		{
			u8_retVal = BCM_ERROR_NOT_OK;
		}
	}
	return u8_retVal;
}
 4c0:	08 95       	ret

000004c2 <BCM_rec_n>:
u8_bcmError_t BCM_rec_n(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
 4c2:	00 97       	sbiw	r24, 0x00	; 0
 4c4:	89 f0       	breq	.+34     	; 0x4e8 <BCM_rec_n+0x26>
	{
		u8_retVal = BCM_ERROR_NOT_OK;
	}
	else
	{
		if (st_bcm_instance_t->comm_portocol == UART)
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 81       	ld	r18, Z
 4ca:	21 11       	cpse	r18, r1
 4cc:	0f c0       	rjmp	.+30     	; 0x4ec <BCM_rec_n+0x2a>
		{
			if (st_bcm_instance_t->comm_channel == UART_0 && u8_gs_bcmUartState[UART_0] == INIT)
 4ce:	21 81       	ldd	r18, Z+1	; 0x01
 4d0:	21 11       	cpse	r18, r1
 4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <BCM_rec_n+0x2e>
 4d4:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <u8_gs_bcmUartState>
 4d8:	21 30       	cpi	r18, 0x01	; 1
 4da:	61 f4       	brne	.+24     	; 0x4f4 <BCM_rec_n+0x32>
			{
				u8_retVal = UART_read_string(st_bcm_instance_t->u8_message ,UART0);
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	84 81       	ldd	r24, Z+4	; 0x04
 4e0:	95 81       	ldd	r25, Z+5	; 0x05
 4e2:	0e 94 a8 01 	call	0x350	; 0x350 <UART_read_string>
 4e6:	08 95       	ret
u8_bcmError_t BCM_rec_n(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
	{
		u8_retVal = BCM_ERROR_NOT_OK;
 4e8:	86 e0       	ldi	r24, 0x06	; 6
 4ea:	08 95       	ret
				u8_retVal = BCM_ERROR_NOT_OK;
			}
		}
		else
		{
			u8_retVal = BCM_ERROR_NOT_OK;
 4ec:	86 e0       	ldi	r24, 0x06	; 6
 4ee:	08 95       	ret
			{
				u8_retVal = UART_read_string(st_bcm_instance_t->u8_message ,UART0);
			}
			else
			{
				u8_retVal = BCM_ERROR_NOT_OK;
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	08 95       	ret
 4f4:	86 e0       	ldi	r24, 0x06	; 6
		{
			u8_retVal = BCM_ERROR_NOT_OK;
		}
	}
	return u8_retVal;
}
 4f6:	08 95       	ret

000004f8 <BCM_dispatcher>:
u8_bcmError_t BCM_dispatcher(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
 4f8:	00 97       	sbiw	r24, 0x00	; 0
 4fa:	79 f1       	breq	.+94     	; 0x55a <BCM_dispatcher+0x62>
 4fc:	fc 01       	movw	r30, r24
	{
		u8_retVal = BCM_ERROR_NOT_OK;
	}
	else
	{
		switch(st_bcm_instance_t->comm_operation)
 4fe:	82 81       	ldd	r24, Z+2	; 0x02
 500:	88 23       	and	r24, r24
 502:	19 f0       	breq	.+6      	; 0x50a <BCM_dispatcher+0x12>
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	a9 f0       	breq	.+42     	; 0x532 <BCM_dispatcher+0x3a>
 508:	2a c0       	rjmp	.+84     	; 0x55e <BCM_dispatcher+0x66>
		{
			case SEND:
			{
				switch(st_bcm_instance_t->comm_operation_size)
 50a:	83 81       	ldd	r24, Z+3	; 0x03
 50c:	88 23       	and	r24, r24
 50e:	19 f0       	breq	.+6      	; 0x516 <BCM_dispatcher+0x1e>
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	41 f0       	breq	.+16     	; 0x524 <BCM_dispatcher+0x2c>
 514:	26 c0       	rjmp	.+76     	; 0x562 <BCM_dispatcher+0x6a>
				{
					case BYTE:
					{
						switch(st_bcm_instance_t->comm_portocol)
 516:	80 81       	ld	r24, Z
 518:	81 11       	cpse	r24, r1
 51a:	25 c0       	rjmp	.+74     	; 0x566 <BCM_dispatcher+0x6e>
						{
							case UART:
							{
								u8_retVal = BCM_send(st_bcm_instance_t);
 51c:	cf 01       	movw	r24, r30
 51e:	0e 94 0e 02 	call	0x41c	; 0x41c <BCM_send>
								break;
 522:	08 95       	ret
						}
						break;
					}
					case STRING:
					{
						switch(st_bcm_instance_t->comm_portocol)
 524:	80 81       	ld	r24, Z
 526:	81 11       	cpse	r24, r1
 528:	20 c0       	rjmp	.+64     	; 0x56a <BCM_dispatcher+0x72>
						{
							case UART:
							{
								u8_retVal = BCM_send_n(st_bcm_instance_t);
 52a:	cf 01       	movw	r24, r30
 52c:	0e 94 2b 02 	call	0x456	; 0x456 <BCM_send_n>
								break;
 530:	08 95       	ret
				}
				break;
			}
			case REC:
			{
				switch(st_bcm_instance_t->comm_operation_size)
 532:	83 81       	ldd	r24, Z+3	; 0x03
 534:	88 23       	and	r24, r24
 536:	19 f0       	breq	.+6      	; 0x53e <BCM_dispatcher+0x46>
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	41 f0       	breq	.+16     	; 0x54c <BCM_dispatcher+0x54>
 53c:	18 c0       	rjmp	.+48     	; 0x56e <BCM_dispatcher+0x76>
				{
					case BYTE:
					{
						switch(st_bcm_instance_t->comm_portocol)
 53e:	80 81       	ld	r24, Z
 540:	81 11       	cpse	r24, r1
 542:	17 c0       	rjmp	.+46     	; 0x572 <BCM_dispatcher+0x7a>
						{
							case UART:
							{
								u8_retVal = BCM_rec(st_bcm_instance_t);
 544:	cf 01       	movw	r24, r30
 546:	0e 94 46 02 	call	0x48c	; 0x48c <BCM_rec>
								break;
 54a:	08 95       	ret
						}
						break;
					}
					case STRING:
					{
						switch(st_bcm_instance_t->comm_portocol)
 54c:	80 81       	ld	r24, Z
 54e:	81 11       	cpse	r24, r1
 550:	12 c0       	rjmp	.+36     	; 0x576 <BCM_dispatcher+0x7e>
						{
							case UART:
							{
								u8_retVal = BCM_rec_n(st_bcm_instance_t);
 552:	cf 01       	movw	r24, r30
 554:	0e 94 61 02 	call	0x4c2	; 0x4c2 <BCM_rec_n>
								break;
 558:	08 95       	ret
u8_bcmError_t BCM_dispatcher(st_bcm_instance_t* st_bcm_instance_t)
{
	uint8_t u8_retVal = BCM_ERROR_OK;
	if (st_bcm_instance_t == NULL)
	{
		u8_retVal = BCM_ERROR_NOT_OK;
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	08 95       	ret
				break;
			}
			
			default:
			{
				u8_retVal = BCM_ERROR_NOT_OK;
 55e:	86 e0       	ldi	r24, 0x06	; 6
 560:	08 95       	ret
						}
						break;
					}
					default:
					{
						u8_retVal = BCM_ERROR_NOT_OK;
 562:	86 e0       	ldi	r24, 0x06	; 6
 564:	08 95       	ret
								u8_retVal = BCM_send(st_bcm_instance_t);
								break;
							}
							default:
							{
								u8_retVal = BCM_ERROR_NOT_OK;
 566:	86 e0       	ldi	r24, 0x06	; 6
 568:	08 95       	ret
								u8_retVal = BCM_send_n(st_bcm_instance_t);
								break;
							}
							default:
							{
								u8_retVal = BCM_ERROR_NOT_OK;
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	08 95       	ret
						}
						break;
					}
					default:
					{
						u8_retVal = BCM_ERROR_NOT_OK;
 56e:	86 e0       	ldi	r24, 0x06	; 6
 570:	08 95       	ret
								u8_retVal = BCM_rec(st_bcm_instance_t);
								break;
							}
							default:
							{
								u8_retVal = BCM_ERROR_NOT_OK;
 572:	86 e0       	ldi	r24, 0x06	; 6
 574:	08 95       	ret
								u8_retVal = BCM_rec_n(st_bcm_instance_t);
								break;
							}
							default:
							{
								u8_retVal = BCM_ERROR_NOT_OK;
 576:	86 e0       	ldi	r24, 0x06	; 6
			}
			
		}
	}
	return u8_retVal;
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
